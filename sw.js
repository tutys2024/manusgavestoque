const CACHE_NAME = 'estoque-pwa-v1';\nconst urlsToCache = [\n  '/',\n  '/static/js/bundle.js',\n  '/static/css/main.css',\n  '/manifest.json',\n  '/icon-192x192.png',\n  '/icon-512x512.png'\n];\n\n// Install event - cache resources\nself.addEventListener('install', (event) => {\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then((cache) => {\n        console.log('Cache opened');\n        return cache.addAll(urlsToCache);\n      })\n      .catch((error) => {\n        console.error('Cache installation failed:', error);\n      })\n  );\n});\n\n// Fetch event - serve from cache when offline\nself.addEventListener('fetch', (event) => {\n  event.respondWith(\n    caches.match(event.request)\n      .then((response) => {\n        // Return cached version or fetch from network\n        if (response) {\n          return response;\n        }\n        \n        // Clone the request because it's a stream\n        const fetchRequest = event.request.clone();\n        \n        return fetch(fetchRequest).then((response) => {\n          // Check if we received a valid response\n          if (!response || response.status !== 200 || response.type !== 'basic') {\n            return response;\n          }\n          \n          // Clone the response because it's a stream\n          const responseToCache = response.clone();\n          \n          caches.open(CACHE_NAME)\n            .then((cache) => {\n              cache.put(event.request, responseToCache);\n            });\n          \n          return response;\n        }).catch(() => {\n          // Return offline page or cached content\n          if (event.request.destination === 'document') {\n            return caches.match('/');\n          }\n        });\n      })\n  );\n});\n\n// Activate event - clean up old caches\nself.addEventListener('activate', (event) => {\n  event.waitUntil(\n    caches.keys().then((cacheNames) => {\n      return Promise.all(\n        cacheNames.map((cacheName) => {\n          if (cacheName !== CACHE_NAME) {\n            console.log('Deleting old cache:', cacheName);\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    })\n  );\n});\n\n// Background sync for offline data\nself.addEventListener('sync', (event) => {\n  if (event.tag === 'background-sync') {\n    event.waitUntil(\n      // Sync offline data when connection is restored\n      syncOfflineData()\n    );\n  }\n});\n\n// Push notification support\nself.addEventListener('push', (event) => {\n  const options = {\n    body: event.data ? event.data.text() : 'Nova atualização disponível',\n    icon: '/icon-192x192.png',\n    badge: '/icon-192x192.png',\n    vibrate: [100, 50, 100],\n    data: {\n      dateOfArrival: Date.now(),\n      primaryKey: 1\n    },\n    actions: [\n      {\n        action: 'explore',\n        title: 'Ver Detalhes',\n        icon: '/icon-192x192.png'\n      },\n      {\n        action: 'close',\n        title: 'Fechar',\n        icon: '/icon-192x192.png'\n      }\n    ]\n  };\n  \n  event.waitUntil(\n    self.registration.showNotification('Sistema de Estoque', options)\n  );\n});\n\n// Notification click handling\nself.addEventListener('notificationclick', (event) => {\n  event.notification.close();\n  \n  if (event.action === 'explore') {\n    event.waitUntil(\n      clients.openWindow('/')\n    );\n  }\n});\n\n// Helper function to sync offline data\nasync function syncOfflineData() {\n  try {\n    // Get offline data from IndexedDB or localStorage\n    const offlineData = await getOfflineData();\n    \n    if (offlineData && offlineData.length > 0) {\n      // Send offline data to server\n      for (const item of offlineData) {\n        await syncItemToServer(item);\n      }\n      \n      // Clear offline data after successful sync\n      await clearOfflineData();\n      \n      console.log('Offline data synced successfully');\n    }\n  } catch (error) {\n    console.error('Failed to sync offline data:', error);\n  }\n}\n\n// Placeholder functions for offline data management\nasync function getOfflineData() {\n  // Implementation would use IndexedDB to get offline data\n  return [];\n}\n\nasync function syncItemToServer(item) {\n  // Implementation would send item data to Google Sheets API\n  console.log('Syncing item:', item);\n}\n\nasync function clearOfflineData() {\n  // Implementation would clear offline data from IndexedDB\n  console.log('Clearing offline data');\n}

